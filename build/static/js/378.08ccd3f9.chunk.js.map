{"version":3,"file":"static/js/378.08ccd3f9.chunk.js","mappings":"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","sources":["hooks/useDocumentTitle.js","pages/Home/ProductCard.js","../node_modules/src/observe.ts","../node_modules/src/InView.tsx","pages/Home/index.js","pages/Home/Home.js","../node_modules/src/useInView.tsx","../node_modules/react-bootstrap/esm/CardImg.js","../node_modules/react-bootstrap/esm/CardHeader.js","../node_modules/react-bootstrap/esm/Card.js"],"sourcesContent":["import { useEffect } from \"react\";\r\n\r\nexport default function useDocumentTitle(title, success = true) {\r\n  useEffect(() => {\r\n    document.title = `Loading...`;\r\n    if (success) document.title = title;\r\n  }, [success]);\r\n}\r\n","import { Container, Row, Col, Card, Ratio } from \"react-bootstrap\";\r\nimport { useNavigate } from \"react-router-dom\";\r\n\r\nexport default function ProductCard({ data }) {\r\n  const navigate = useNavigate();\r\n  const handleClick = (name) => {\r\n    navigate(`/products/${name}`);\r\n  };\r\n\r\n  if (data.length===0) {\r\n    return (\r\n      <Container className=\"screen-center\">\r\n        <Row>\r\n          <Col>No Result</Col>\r\n        </Row>\r\n      </Container>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <Container>\r\n      <Row xs={1} md={4} className=\"g-4\">\r\n        {data.map(({ id, name, desc, image, stock, unitprice }, idx) => (\r\n          <Col key={idx}>\r\n            <Card\r\n              onClick={() => handleClick(name)}\r\n              className=\"text-center pointer\"\r\n              style={{ backgroundColor: stock === 0 && \"#dddddd\" }}\r\n            >\r\n              {/* 1x1 4x3 16x9 21x9 */}\r\n              {/* <Ratio aspectRatio=\"4x3\"> */}\r\n              <Ratio aspectRatio=\"4x3\">\r\n                <Card.Img\r\n                  variant=\"top\"\r\n                  src={image[0]}\r\n                  className=\"w-100 h-100 cover\"\r\n                />\r\n              </Ratio>\r\n              <Card.Header as=\"h5\" className=\"text-ellipsis\" >{name}</Card.Header>\r\n\r\n              <Card.Body>\r\n                <Card.Title>RM {unitprice}</Card.Title>\r\n                <Card.Subtitle>\r\n                  {stock ? \"Stock:\" + stock : \"Sold Out\"}\r\n                </Card.Subtitle>\r\n                <Card.Text className=\"text-nowrap overflow-hidden text-truncate\">\r\n                  {desc}\r\n                </Card.Text>\r\n              </Card.Body>\r\n            </Card>\r\n          </Col>\r\n        ))}\r\n      </Row>\r\n    </Container>\r\n  );\r\n}\r\n","import type { ObserverInstanceCallback } from './index';\n\nconst observerMap = new Map<\n  string,\n  {\n    id: string;\n    observer: IntersectionObserver;\n    elements: Map<Element, Array<ObserverInstanceCallback>>;\n  }\n>();\n\nconst RootIds: WeakMap<Element | Document, string> = new WeakMap();\nlet rootId = 0;\n\nlet unsupportedValue: boolean | undefined = undefined;\n\n/**\n * What should be the default behavior if the IntersectionObserver is unsupported?\n * Ideally the polyfill has been loaded, you can have the following happen:\n * - `undefined`: Throw an error\n * - `true` or `false`: Set the `inView` value to this regardless of intersection state\n * **/\nexport function defaultFallbackInView(inView: boolean | undefined) {\n  unsupportedValue = inView;\n}\n\n/**\n * Generate a unique ID for the root element\n * @param root\n */\nfunction getRootId(root: IntersectionObserverInit['root']) {\n  if (!root) return '0';\n  if (RootIds.has(root)) return RootIds.get(root);\n  rootId += 1;\n  RootIds.set(root, rootId.toString());\n  return RootIds.get(root);\n}\n\n/**\n * Convert the options to a string Id, based on the values.\n * Ensures we can reuse the same observer when observing elements with the same options.\n * @param options\n */\nexport function optionsToId(options: IntersectionObserverInit) {\n  return Object.keys(options)\n    .sort()\n    .filter((key) => options[key] !== undefined)\n    .map((key) => {\n      return `${key}_${\n        key === 'root' ? getRootId(options.root) : options[key]\n      }`;\n    })\n    .toString();\n}\n\nfunction createObserver(options: IntersectionObserverInit) {\n  // Create a unique ID for this observer instance, based on the root, root margin and threshold.\n  let id = optionsToId(options);\n  let instance = observerMap.get(id);\n\n  if (!instance) {\n    // Create a map of elements this observer is going to observe. Each element has a list of callbacks that should be triggered, once it comes into view.\n    const elements = new Map<Element, Array<ObserverInstanceCallback>>();\n    let thresholds: number[] | readonly number[];\n\n    const observer = new IntersectionObserver((entries) => {\n      entries.forEach((entry) => {\n        // While it would be nice if you could just look at isIntersecting to determine if the component is inside the viewport, browsers can't agree on how to use it.\n        // -Firefox ignores `threshold` when considering `isIntersecting`, so it will never be false again if `threshold` is > 0\n        const inView =\n          entry.isIntersecting &&\n          thresholds.some((threshold) => entry.intersectionRatio >= threshold);\n\n        // @ts-ignore support IntersectionObserver v2\n        if (options.trackVisibility && typeof entry.isVisible === 'undefined') {\n          // The browser doesn't support Intersection Observer v2, falling back to v1 behavior.\n          // @ts-ignore\n          entry.isVisible = inView;\n        }\n\n        elements.get(entry.target)?.forEach((callback) => {\n          callback(inView, entry);\n        });\n      });\n    }, options);\n\n    // Ensure we have a valid thresholds array. If not, use the threshold from the options\n    thresholds =\n      observer.thresholds ||\n      (Array.isArray(options.threshold)\n        ? options.threshold\n        : [options.threshold || 0]);\n\n    instance = {\n      id,\n      observer,\n      elements,\n    };\n\n    observerMap.set(id, instance);\n  }\n\n  return instance;\n}\n\n/**\n * @param element - DOM Element to observe\n * @param callback - Callback function to trigger when intersection status changes\n * @param options - Intersection Observer options\n * @param fallbackInView - Fallback inView value.\n * @return Function - Cleanup function that should be triggered to unregister the observer\n */\nexport function observe(\n  element: Element,\n  callback: ObserverInstanceCallback,\n  options: IntersectionObserverInit = {},\n  fallbackInView = unsupportedValue,\n) {\n  if (\n    typeof window.IntersectionObserver === 'undefined' &&\n    fallbackInView !== undefined\n  ) {\n    const bounds = element.getBoundingClientRect();\n    callback(fallbackInView, {\n      isIntersecting: fallbackInView,\n      target: element,\n      intersectionRatio:\n        typeof options.threshold === 'number' ? options.threshold : 0,\n      time: 0,\n      boundingClientRect: bounds,\n      intersectionRect: bounds,\n      rootBounds: bounds,\n    });\n    return () => {\n      // Nothing to cleanup\n    };\n  }\n  // An observer with the same options can be reused, so lets use this fact\n  const { id, observer, elements } = createObserver(options);\n\n  // Register the callback listener for this element\n  let callbacks = elements.get(element) || [];\n  if (!elements.has(element)) {\n    elements.set(element, callbacks);\n  }\n\n  callbacks.push(callback);\n  observer.observe(element);\n\n  return function unobserve() {\n    // Remove the callback from the callback list\n    callbacks.splice(callbacks.indexOf(callback), 1);\n\n    if (callbacks.length === 0) {\n      // No more callback exists for element, so destroy it\n      elements.delete(element);\n      observer.unobserve(element);\n    }\n\n    if (elements.size === 0) {\n      // No more elements are being observer by this instance, so destroy it\n      observer.disconnect();\n      observerMap.delete(id);\n    }\n  };\n}\n","import * as React from 'react';\nimport type { IntersectionObserverProps, PlainChildrenProps } from './index';\nimport { observe } from './observe';\n\ntype State = {\n  inView: boolean;\n  entry?: IntersectionObserverEntry;\n};\n\nfunction isPlainChildren(\n  props: IntersectionObserverProps | PlainChildrenProps,\n): props is PlainChildrenProps {\n  return typeof props.children !== 'function';\n}\n\n/**\n ## Render props\n\n To use the `<InView>` component, you pass it a function. It will be called\n whenever the state changes, with the new value of `inView`. In addition to the\n `inView` prop, children also receive a `ref` that should be set on the\n containing DOM element. This is the element that the IntersectionObserver will\n monitor.\n\n If you need it, you can also access the\n [`IntersectionObserverEntry`](https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserverEntry)\n on `entry`, giving you access to all the details about the current intersection\n state.\n\n ```jsx\n import { InView } from 'react-intersection-observer';\n\n const Component = () => (\n <InView>\n {({ inView, ref, entry }) => (\n      <div ref={ref}>\n        <h2>{`Header inside viewport ${inView}.`}</h2>\n      </div>\n    )}\n </InView>\n );\n\n export default Component;\n ```\n\n ## Plain children\n\n You can pass any element to the `<InView />`, and it will handle creating the\n wrapping DOM element. Add a handler to the `onChange` method, and control the\n state in your own component. Any extra props you add to `<InView>` will be\n passed to the HTML element, allowing you set the `className`, `style`, etc.\n\n ```jsx\n import { InView } from 'react-intersection-observer';\n\n const Component = () => (\n <InView as=\"div\" onChange={(inView, entry) => console.log('Inview:', inView)}>\n <h2>Plain children are always rendered. Use onChange to monitor state.</h2>\n </InView>\n );\n\n export default Component;\n ```\n */\nexport class InView extends React.Component<\n  IntersectionObserverProps | PlainChildrenProps,\n  State\n> {\n  constructor(props: IntersectionObserverProps | PlainChildrenProps) {\n    super(props);\n    this.state = {\n      inView: !!props.initialInView,\n      entry: undefined,\n    };\n  }\n\n  componentDidUpdate(prevProps: IntersectionObserverProps) {\n    // If a IntersectionObserver option changed, reinit the observer\n    if (\n      prevProps.rootMargin !== this.props.rootMargin ||\n      prevProps.root !== this.props.root ||\n      prevProps.threshold !== this.props.threshold ||\n      prevProps.skip !== this.props.skip ||\n      prevProps.trackVisibility !== this.props.trackVisibility ||\n      prevProps.delay !== this.props.delay\n    ) {\n      this.unobserve();\n      this.observeNode();\n    }\n  }\n\n  componentWillUnmount() {\n    this.unobserve();\n    this.node = null;\n  }\n\n  node: Element | null = null;\n  _unobserveCb: (() => void) | null = null;\n\n  observeNode() {\n    if (!this.node || this.props.skip) return;\n    const {\n      threshold,\n      root,\n      rootMargin,\n      trackVisibility,\n      delay,\n      fallbackInView,\n    } = this.props;\n\n    this._unobserveCb = observe(\n      this.node,\n      this.handleChange,\n      {\n        threshold,\n        root,\n        rootMargin,\n        // @ts-ignore\n        trackVisibility,\n        // @ts-ignore\n        delay,\n      },\n      fallbackInView,\n    );\n  }\n\n  unobserve() {\n    if (this._unobserveCb) {\n      this._unobserveCb();\n      this._unobserveCb = null;\n    }\n  }\n\n  handleNode = (node?: Element | null) => {\n    if (this.node) {\n      // Clear the old observer, before we start observing a new element\n      this.unobserve();\n\n      if (!node && !this.props.triggerOnce && !this.props.skip) {\n        // Reset the state if we get a new node, and we aren't ignoring updates\n        this.setState({ inView: !!this.props.initialInView, entry: undefined });\n      }\n    }\n\n    this.node = node ? node : null;\n    this.observeNode();\n  };\n\n  handleChange = (inView: boolean, entry: IntersectionObserverEntry) => {\n    if (inView && this.props.triggerOnce) {\n      // If `triggerOnce` is true, we should stop observing the element.\n      this.unobserve();\n    }\n    if (!isPlainChildren(this.props)) {\n      // Store the current State, so we can pass it to the children in the next render update\n      // There's no reason to update the state for plain children, since it's not used in the rendering.\n      this.setState({ inView, entry });\n    }\n    if (this.props.onChange) {\n      // If the user is actively listening for onChange, always trigger it\n      this.props.onChange(inView, entry);\n    }\n  };\n\n  render() {\n    if (!isPlainChildren(this.props)) {\n      const { inView, entry } = this.state;\n      return this.props.children({ inView, entry, ref: this.handleNode });\n    }\n\n    const {\n      children,\n      as,\n      triggerOnce,\n      threshold,\n      root,\n      rootMargin,\n      onChange,\n      skip,\n      trackVisibility,\n      delay,\n      initialInView,\n      fallbackInView,\n      ...props\n    } = this.props;\n\n    return React.createElement(\n      as || 'div',\n      { ref: this.handleNode, ...props },\n      children,\n    );\n  }\n}\n","import Home from \"./Home\";\r\nexport default Home;\r\n","import { useEffect, useState } from \"react\";\nimport { Col, Container, FloatingLabel, Form, Row } from \"react-bootstrap\";\nimport {\n  useProductCategory,\n  useProducts,\n  useSearch,\n  useSearchCategory\n} from \"../../api\";\n\n// Component\nimport Loading from \"../../components/Loading\";\nimport ProductCard from \"./ProductCard\";\n\n// Infinite Page Loop\nimport { useInView } from \"react-intersection-observer\";\n\n// Hooks\nimport useDebounce from \"../../hooks/useDebounce\";\nimport useDocumentTitle from \"../../hooks/useDocumentTitle\";\n\nexport default function Home({ title }) {\n  // Infinity Scroll\n  const { ref, inView } = useInView();\n\n  useEffect(() => {\n    if (inView) fetchNextPage();\n  }, [inView]);\n\n  const [filter, setFilter] = useState(\"\");\n  const debounce = useDebounce(filter, 1000);\n  const [pid, setPid] = useState(\"\");\n\n  const {\n    isLoading: productLoading,\n    isError,\n    error,\n    data: product,\n    isSuccess,\n    hasNextPage,\n    fetchNextPage,\n    isFetching,\n    isFetchingNextPage,\n  } = useProducts();\n  const { data: category, isLoading: categoryLoading } = useProductCategory();\n  const { data: search, isFetching: fetchingSearch } = useSearch(debounce);\n  const { data: categoryResult, isFetching: fetchingCategory } =\n    useSearchCategory(pid);\n  useDocumentTitle(title, isSuccess);\n\n  if (isError) return <span>Error: {error.message}</span>;\n\n  const Product = () => {\n    if (productLoading || categoryLoading || fetchingSearch || fetchingCategory)\n      return <Loading color=\"green\" />;\n    if (categoryResult) return <ProductCard data={categoryResult} />;\n    if (search && search.length > 0) return <ProductCard data={search} />;\n    if (search && search.length === 0 && debounce)\n      return <ProductCard data={[]} />;\n    return <ProductCard data={product.pages} />;\n  };\n\n  return (\n    <>\n      <Container className=\"d-flex justify-content-between mb-3\">\n        <Row>\n          <Col>\n            <FloatingLabel label=\"Search\">\n              <Form.Control\n                type=\"search\"\n                placeholder=\"Search\"\n                aria-label=\"Search\"\n                value={filter}\n                onChange={(e) => setFilter(e.target.value)}\n                // onKeyDown={(e) => {\n                //   if (e.key === \"Enter\") setFilter(e.target.value);\n                // }}\n                style={{ width: \"300px\" }}\n              />\n            </FloatingLabel>\n          </Col>\n          <Col>\n            <FloatingLabel label=\"Category\" style={{ minWidth: \"100px\" }}>\n              <Form.Select value={pid} onChange={(e) => setPid(e.target.value)}>\n                <option value=\"\">All</option>\n                {category?.map(({ id, name }) => (\n                  <option\n                    key={id}\n                    value={id}\n                    style={{ textTransform: \"capitalize\" }}\n                  >\n                    {name}\n                  </option>\n                ))}\n              </Form.Select>\n            </FloatingLabel>\n          </Col>\n        </Row>\n      </Container>\n      <Product />\n      <Container className=\"mt-3\">\n        <Row>\n          <Col className=\"d-flex justify-content-center\">\n            {hasNextPage && (\n              <div\n                ref={ref}\n                disabled={!hasNextPage || isFetchingNextPage}\n                onClick={fetchNextPage}\n              >\n                {isFetching && isFetchingNextPage ? <Loading /> : \"Load More\"}\n              </div>\n            )}\n          </Col>\n        </Row>\n      </Container>\n    </>\n  );\n}\n","import * as React from 'react';\nimport type { InViewHookResponse, IntersectionOptions } from './index';\nimport { observe } from './observe';\n\ntype State = {\n  inView: boolean;\n  entry?: IntersectionObserverEntry;\n};\n\n/**\n * React Hooks make it easy to monitor the `inView` state of your components. Call\n * the `useInView` hook with the (optional) [options](#options) you need. It will\n * return an array containing a `ref`, the `inView` status and the current\n * [`entry`](https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserverEntry).\n * Assign the `ref` to the DOM element you want to monitor, and the hook will\n * report the status.\n *\n * @example\n * ```jsx\n * import React from 'react';\n * import { useInView } from 'react-intersection-observer';\n *\n * const Component = () => {\n *   const { ref, inView, entry } = useInView({\n *       threshold: 0,\n *   });\n *\n *   return (\n *     <div ref={ref}>\n *       <h2>{`Header inside viewport ${inView}.`}</h2>\n *     </div>\n *   );\n * };\n * ```\n */\nexport function useInView({\n  threshold,\n  delay,\n  trackVisibility,\n  rootMargin,\n  root,\n  triggerOnce,\n  skip,\n  initialInView,\n  fallbackInView,\n  onChange,\n}: IntersectionOptions = {}): InViewHookResponse {\n  const [ref, setRef] = React.useState<Element | null>(null);\n  const callback = React.useRef<IntersectionOptions['onChange']>();\n  const [state, setState] = React.useState<State>({\n    inView: !!initialInView,\n    entry: undefined,\n  });\n\n  // Store the onChange callback in a `ref`, so we can access the latest instance\n  // inside the `useEffect`, but without triggering a rerender.\n  callback.current = onChange;\n\n  React.useEffect(\n    () => {\n      // Ensure we have node ref, and that we shouldn't skip observing\n      if (skip || !ref) return;\n\n      let unobserve: (() => void) | undefined = observe(\n        ref,\n        (inView, entry) => {\n          setState({\n            inView,\n            entry,\n          });\n          if (callback.current) callback.current(inView, entry);\n\n          if (entry.isIntersecting && triggerOnce && unobserve) {\n            // If it should only trigger once, unobserve the element after it's inView\n            unobserve();\n            unobserve = undefined;\n          }\n        },\n        {\n          root,\n          rootMargin,\n          threshold,\n          // @ts-ignore\n          trackVisibility,\n          // @ts-ignore\n          delay,\n        },\n        fallbackInView,\n      );\n\n      return () => {\n        if (unobserve) {\n          unobserve();\n        }\n      };\n    },\n    // We break the rule here, because we aren't including the actual `threshold` variable\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [\n      // If the threshold is an array, convert it to a string, so it won't change between renders.\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n      Array.isArray(threshold) ? threshold.toString() : threshold,\n      ref,\n      root,\n      rootMargin,\n      triggerOnce,\n      skip,\n      trackVisibility,\n      fallbackInView,\n      delay,\n    ],\n  );\n\n  const entryTarget = state.entry?.target;\n\n  React.useEffect(() => {\n    if (!ref && entryTarget && !triggerOnce && !skip) {\n      // If we don't have a node ref, then reset the state (unless the hook is set to only `triggerOnce` or `skip`)\n      // This ensures we correctly reflect the current state - If you aren't observing anything, then nothing is inView\n      setState({\n        inView: !!initialInView,\n        entry: undefined,\n      });\n    }\n  }, [ref, entryTarget, triggerOnce, skip, initialInView]);\n\n  const result = [setRef, state.inView, state.entry] as InViewHookResponse;\n\n  // Support object destructuring, by adding the specific values.\n  result.ref = result[0];\n  result.inView = result[1];\n  result.entry = result[2];\n\n  return result;\n}\n","import classNames from 'classnames';\nimport * as React from 'react';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst CardImg = /*#__PURE__*/React.forwardRef( // Need to define the default \"as\" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595\n({\n  bsPrefix,\n  className,\n  variant,\n  as: Component = 'img',\n  ...props\n}, ref) => {\n  const prefix = useBootstrapPrefix(bsPrefix, 'card-img');\n  return /*#__PURE__*/_jsx(Component, {\n    ref: ref,\n    className: classNames(variant ? `${prefix}-${variant}` : prefix, className),\n    ...props\n  });\n});\nCardImg.displayName = 'CardImg';\nexport default CardImg;","import classNames from 'classnames';\nimport * as React from 'react';\nimport { useMemo } from 'react';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport CardHeaderContext from './CardHeaderContext';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst CardHeader = /*#__PURE__*/React.forwardRef(({\n  bsPrefix,\n  className,\n  // Need to define the default \"as\" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595\n  as: Component = 'div',\n  ...props\n}, ref) => {\n  const prefix = useBootstrapPrefix(bsPrefix, 'card-header');\n  const contextValue = useMemo(() => ({\n    cardHeaderBsPrefix: prefix\n  }), [prefix]);\n  return /*#__PURE__*/_jsx(CardHeaderContext.Provider, {\n    value: contextValue,\n    children: /*#__PURE__*/_jsx(Component, {\n      ref: ref,\n      ...props,\n      className: classNames(className, prefix)\n    })\n  });\n});\nCardHeader.displayName = 'CardHeader';\nexport default CardHeader;","import classNames from 'classnames';\nimport * as React from 'react';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport createWithBsPrefix from './createWithBsPrefix';\nimport divWithClassName from './divWithClassName';\nimport CardImg from './CardImg';\nimport CardHeader from './CardHeader';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst DivStyledAsH5 = divWithClassName('h5');\nconst DivStyledAsH6 = divWithClassName('h6');\nconst CardBody = createWithBsPrefix('card-body');\nconst CardTitle = createWithBsPrefix('card-title', {\n  Component: DivStyledAsH5\n});\nconst CardSubtitle = createWithBsPrefix('card-subtitle', {\n  Component: DivStyledAsH6\n});\nconst CardLink = createWithBsPrefix('card-link', {\n  Component: 'a'\n});\nconst CardText = createWithBsPrefix('card-text', {\n  Component: 'p'\n});\nconst CardFooter = createWithBsPrefix('card-footer');\nconst CardImgOverlay = createWithBsPrefix('card-img-overlay');\nconst defaultProps = {\n  body: false\n};\nconst Card = /*#__PURE__*/React.forwardRef(({\n  bsPrefix,\n  className,\n  bg,\n  text,\n  border,\n  body,\n  children,\n  // Need to define the default \"as\" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595\n  as: Component = 'div',\n  ...props\n}, ref) => {\n  const prefix = useBootstrapPrefix(bsPrefix, 'card');\n  return /*#__PURE__*/_jsx(Component, {\n    ref: ref,\n    ...props,\n    className: classNames(className, prefix, bg && `bg-${bg}`, text && `text-${text}`, border && `border-${border}`),\n    children: body ? /*#__PURE__*/_jsx(CardBody, {\n      children: children\n    }) : children\n  });\n});\nCard.displayName = 'Card';\nCard.defaultProps = defaultProps;\nexport default Object.assign(Card, {\n  Img: CardImg,\n  Title: CardTitle,\n  Subtitle: CardSubtitle,\n  Body: CardBody,\n  Link: CardLink,\n  Text: CardText,\n  Header: CardHeader,\n  Footer: CardFooter,\n  ImgOverlay: CardImgOverlay\n});"],"names":["useDocumentTitle","title","success","useEffect","document","ProductCard","data","navigate","useNavigate","length","Container","className","Row","Col","xs","md","map","idx","id","name","desc","image","stock","unitprice","Card","onClick","handleClick","style","backgroundColor","Ratio","aspectRatio","variant","src","as","observerMap","Map","RootIds","WeakMap","rootId","unsupportedValue","undefined","optionsToId","options","Object","keys","sort","filter","key","root","has","set","toString","get","createObserver","instance","thresholds","elements","observer","IntersectionObserver","entries","forEach","entry","inView","isIntersecting","some","threshold","intersectionRatio","trackVisibility","isVisible","target","callback","Array","isArray","observe","element","fallbackInView","window","bounds","getBoundingClientRect","time","boundingClientRect","intersectionRect","rootBounds","callbacks","push","splice","indexOf","delete","unobserve","size","disconnect","isPlainChildren","props","children","React","delay","rootMargin","triggerOnce","skip","initialInView","onChange","ref","setRef","state","setState","current","entryTarget","result","useInView","fetchNextPage","useState","setFilter","debounce","useDebounce","pid","setPid","useProducts","productLoading","isLoading","isError","error","product","isSuccess","hasNextPage","isFetching","isFetchingNextPage","useProductCategory","category","categoryLoading","useSearch","search","fetchingSearch","useSearchCategory","categoryResult","fetchingCategory","message","Product","Loading","color","pages","FloatingLabel","label","Form","type","placeholder","value","e","width","minWidth","textTransform","disabled","CardImg","bsPrefix","Component","prefix","useBootstrapPrefix","_jsx","classNames","displayName","CardHeader","contextValue","useMemo","cardHeaderBsPrefix","CardHeaderContext","DivStyledAsH5","divWithClassName","DivStyledAsH6","CardBody","createWithBsPrefix","CardTitle","CardSubtitle","CardLink","CardText","CardFooter","CardImgOverlay","bg","text","border","body","defaultProps","assign","Img","Title","Subtitle","Body","Link","Text","Header","Footer","ImgOverlay"],"sourceRoot":""}